{"version":3,"file":"static/webpack/static/development/pages/categories/add-device.js.87fe02f61c63270cf386.hot-update.js","sources":["webpack:///./pages/categories/add-device.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport {Label, Header, Segment, Form, Grid, FormGroup} from 'semantic-ui-react';\r\nimport DashboardLayout from '../../src/components/Layout/DashboadLayout';\r\nimport Head from 'next/head';\r\nimport Router from 'next/router';\r\nimport {connect} from 'react-redux';\r\nimport {rackA} from '../../src/redux/_actions/categories/rackA';\r\nimport _ from 'lodash';\r\nimport _config from '../../src/utils/config';\r\n\r\nconst prevURL = _config[_config.environment].prevURL;\r\nimport Cookies from 'js-cookie';\r\n\r\nclass AddDevice extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            disableFormDevice: true,\r\n            dataDevice:[]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {racks, dispatch} = this.props;\r\n        const {action = '', loading = 0, current = {}} = racks;\r\n        let _current = Cookies.get('current');\r\n        let _addDevice = Cookies.get('addDevice');\r\n        if (_current && _addDevice) {\r\n            _current = JSON.parse(_current);\r\n            dispatch(rackA.updateCurrent('current', _current));\r\n            _addDevice = JSON.parse(_addDevice);\r\n            dispatch(rackA.handleAddDevice(_addDevice));\r\n            this.resetCookies();\r\n        }\r\n\r\n        if (action === 'update' && loading === 0 && _.size(current) === 0) {\r\n            const {originalUrl = ''} = racks;\r\n            const regex = new RegExp(/id\\=(\\d+)/);\r\n            const find = originalUrl.match(regex);\r\n            const id = find ? parseInt(find[1]) : null;\r\n            if (!_.isNull(id)) dispatch(rackA.getDeviceById({deviceId: id}));\r\n        }\r\n        this.getData();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const {racks} = nextProps;\r\n        const {action = '', loading = 0, current = {}} = racks;\r\n        const {addDevice = {}} = racks;\r\n        if (action === 'insert' && !_.isUndefined(addDevice.saveSuccess) && addDevice.saveSuccess) {\r\n            const url = prevURL + '/categories/rack-view?id=' + current.rackId;\r\n            Router.push(url);\r\n        }\r\n        // if((action === 'insert' && loading === 2 && !_.isUndefined(current.deviceId) && current.deviceId !== '') || (action === 'update' && loading === 2 && _.size(current) > 0)) {\r\n        //     Router.push('/categories/rack-view');\r\n        // }\r\n        // if(action === 'update' && loading === 0 && _.size(current) > 0) {\r\n        //     if(current.parentId) this.setState({isParent: false});\r\n        // }\r\n    }\r\n\r\n    getData() {\r\n        this.props.dispatch(rackA.getOthersPlus());\r\n    }\r\n\r\n    getHeightMax() {\r\n        let {racks} = this.props;\r\n        let {addDevice = {}, current = {}} = racks;\r\n        let height = parseInt(addDevice.positionU);\r\n        if (!_.isUndefined(current.bookingUs) || !_.isNull(current.bookingUs)) { // co' bookingUs\r\n            let book = current.bookingUs.filter((item, index) => {\r\n                return item.position === addDevice.position && item.positionU < addDevice.positionU;\r\n            });\r\n            if (book.length > 0) {\r\n                let bookMax = book.reduce((prev, curr) => {\r\n                    return prev.positionU > curr.positionU ? prev : curr;\r\n                });\r\n                height = addDevice.positionU - bookMax.positionU;\r\n            }\r\n        }\r\n        if (!_.isUndefined(current.devices) || !_.isNull(current.devices)) { // co' devices\r\n            let device = current.devices.filter((item, index) => {\r\n                return item.position === addDevice.position && item.positionU < addDevice.positionU;\r\n            });\r\n            if (device.length > 0) {\r\n                let deviceMax = device.reduce((prev, curr) => {\r\n                    return prev.positionU > curr.positionU ? prev : curr;\r\n                });\r\n                if ((addDevice.positionU - deviceMax.positionU) < height) {\r\n                    height = addDevice.positionU - deviceMax.positionU;\r\n                }\r\n            }\r\n        }\r\n        return height;\r\n    }\r\n\r\n    validate() {\r\n        let {racks, dispatch} = this.props;\r\n        let {addDevice = {}} = racks;\r\n        let err = 0;\r\n        let deviceName = '',\r\n            connectorNumber = '',\r\n            deviceTypeId = '',\r\n            deviceTemplateId = '',\r\n            contract = '',\r\n            ip = '',\r\n            height = '';\r\n        let regexIP = new RegExp(\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\");\r\n\r\n        if (!addDevice.deviceName) {\r\n            deviceName = 'This field is required';\r\n            err++;\r\n        }\r\n        if (!addDevice.connectorNumber) {\r\n            connectorNumber = 'This field is required';\r\n            err++;\r\n        }\r\n        if (!addDevice.deviceTypeId) {\r\n            deviceTypeId = 'This field is required';\r\n            err++;\r\n        }\r\n        if (!addDevice.deviceTemplateId) {\r\n            deviceTemplateId = 'This field is required';\r\n            err++;\r\n        }\r\n        if (!addDevice.contract) {\r\n            contract = 'This field is required';\r\n        }\r\n        //\r\n        // if (!addDevice.height) {\r\n        //     height = 'This field is required';\r\n        //     err++;\r\n        // } else if (parseInt(addDevice.height) > this.getHeightMax()) {\r\n        //     height = 'Height less than or equal ' + this.getHeightMax();\r\n        //     err++;\r\n        // }\r\n        if (err === 0) {\r\n            return true;\r\n        }\r\n        console.log(\"hei\", this.getHeightMax());\r\n        dispatch(rackA.validate({deviceName, connectorNumber, deviceTypeId, deviceTemplateId, contract, ip, height}));\r\n        return false;\r\n    }\r\n\r\n    handleSave(e) {\r\n        if (!this.validate()) return false;\r\n        const {racks = {}, dispatch} = this.props;\r\n        let {current = {}, addDevice = {}} = racks;\r\n        console.log(current)\r\n        let data = {\r\n            rackId: current.rackId,\r\n            dataCenterKey: current.dataCenterKey,\r\n            codeRoom: current.codeRoom,\r\n            rackName: current.rackName,\r\n            ...addDevice,\r\n        };\r\n        dispatch(rackA.addDevice(data));\r\n    }\r\n\r\n    handleCancel() {\r\n        const {racks = {}} = this.props;\r\n        if (racks.current.rackId) {\r\n            Router.push(prevURL + '/categories/rack-view?id=' + racks.current.rackId);\r\n        }\r\n        // Router.push('/categories/racks');\r\n    }\r\n\r\n    handleChangeInput(e) {\r\n        const {racks = {}, dispatch} = this.props;\r\n        const {addDevice = {}} = racks;\r\n        const {name, value} = e.target;\r\n\r\n        dispatch(rackA.handleAddDevice({\r\n            ...addDevice,\r\n            [name]: value\r\n        }));\r\n    }\r\n\r\n    handleSelect(e, data) {\r\n        if (data.name === \"deviceTemplateId\") {\r\n            this.setState({\r\n                disableFormDevice: false\r\n            })\r\n        }\r\n        const {value, name} = data;\r\n        const {dispatch, racks = {}} = this.props;\r\n        const {deviceTemplate = [], addDevice = {}} = racks;\r\n        const result=deviceTemplate.filter((item, index) => {\r\n            return item.deviceTypeId === value;\r\n        }).map(item => {\r\n            let temp = {\r\n                height: item.height,\r\n                deviceTypeId: item.deviceTypeId,\r\n                deviceTemplateId: item.deviceTemplateId,\r\n                // fullName: '',\r\n                CPU: item.CPU,\r\n                departmentId: \"\",\r\n                HDD: item.HDD,\r\n                power: item.maxPower,\r\n                RAM: item.RAM\r\n            };\r\n            return temp;\r\n        });\r\n        console.log(result)\r\n\r\n        dispatch(rackA.handleAddDevice({\r\n            ...addDevice,\r\n            [name]: value\r\n        }));\r\n\r\n\r\n    }\r\n\r\n    getDeviceType() {\r\n        const {racks = {}} = this.props;\r\n        const {deviceType = []} = racks;\r\n        let result = deviceType.map((item, index) => {\r\n            let temp = {\r\n                text: item.deviceTypeName,\r\n                value: item.deviceTypeId\r\n            }\r\n            return temp;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    getDeviceTemplate() {\r\n        const {racks = {}} = this.props;\r\n        const {deviceTemplate = []} = racks;\r\n        let result = [];\r\n        if (_.isUndefined(racks.addDevice) || _.isUndefined(racks.addDevice.deviceTypeId) || _.isNull(racks.addDevice.deviceTypeId)) {\r\n            return result;\r\n        }\r\n        result = deviceTemplate.filter((item, index) => {\r\n            return item.deviceTypeId === racks.addDevice.deviceTypeId;\r\n        }).map(item => {\r\n            let temp = {\r\n                text: item.deviceTemplateName,\r\n                value: item.deviceTemplateId\r\n            };\r\n            return temp;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    resetCookies() {\r\n        Cookies.remove('current');\r\n        Cookies.remove('addDevice');\r\n    }\r\n\r\n    getContracts() {\r\n        const {racks = {}} = this.props;\r\n        const {contracts = []} = racks;\r\n        let result = contracts.map((item, index) => {\r\n            let temp = {\r\n                text: item.contractId + ' - ' + item.contractName,\r\n                value: item.contractId\r\n            }\r\n            return temp;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    getDepartments() {\r\n        const {racks = {}} = this.props;\r\n        const {departments = []} = racks;\r\n        let result = departments.map((item, index) => {\r\n            let temp = {\r\n                text: item.departmentName,\r\n                value: item.departmentId\r\n            }\r\n            return temp;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        let {racks = {}} = this.props;\r\n        let {\r\n            current = {\r\n                deviceName: '',\r\n                label: '',\r\n                connectorNumber: '',\r\n                position: '',\r\n                positionU: '',\r\n                height: '',\r\n                deviceTypeId: '',\r\n                deviceTemplateId: '',\r\n                contractId: '',\r\n                IP: '',\r\n                // fullName: '',\r\n                CPU: '',\r\n                departmentId: '',\r\n                phone: '',\r\n                HDD: '',\r\n                typeServer: '',\r\n                power: '',\r\n                RAM: ''\r\n            }, addDevice = {}, device = {}, loading = 0,\r\n            validate = {\r\n                deviceName: '',\r\n                label: '',\r\n                connectorNumber: '',\r\n                position: '',\r\n                positionU: '',\r\n                height: '',\r\n                deviceTypeId: '',\r\n                deviceTemplateId: '',\r\n                contractId: '',\r\n                IP: '',\r\n                // fullName: '',\r\n                CPU: '',\r\n                departmentId: '',\r\n                phone: '',\r\n                HDD: '',\r\n                typeServer: '',\r\n                power: '',\r\n                RAM: ''\r\n            }\r\n        } = racks;\r\n        const title = 'Add Device';\r\n        const {disableFormDevice} = this.state;\r\n        const formDevice = [];\r\n        if (disableFormDevice === true) {\r\n            formDevice.push(\"\")\r\n        } else {\r\n                formDevice.push(\r\n                    <Grid.Column>\r\n                        <Form>\r\n                            <Form.Group className=\"form-group\" widths='equal'>\r\n                                <Form.Input\r\n                                    name='HDD'\r\n                                    value={device.HDD}\r\n                                    disabled\r\n                                    onChange={this.handleChangeInput.bind(this)}\r\n                                    fluid\r\n                                    label={<label>HDD</label>}\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"form-group\" widths='equal'>\r\n                                <Form.Input\r\n                                    name='CPU'\r\n                                    value={device.CPU}\r\n                                    onChange={this.handleChangeInput.bind(this)}\r\n                                    disabled\r\n                                    fluid\r\n                                    label={<label>CPU</label>}\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"form-group\" widths='equal'>\r\n                                <Form.Input\r\n                                    name='RAM'\r\n                                    value={device.RAM}\r\n                                    onChange={this.handleChangeInput.bind(this)}\r\n                                    fluid\r\n                                    disabled\r\n                                    label={<label>RAM</label>}\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group className=\"form-group\" widths='equal'>\r\n                                <Form.Input\r\n                                    name='height'\r\n                                    value={device.height}\r\n                                    onChange={this.handleChangeInput.bind(this)}\r\n                                    fluid\r\n                                    type='number'\r\n                                    // max={42} min={1}\r\n                                    disabled\r\n                                    label={<label>Height</label>}\r\n                                    // error={validate.height? true: false}\r\n                                />\r\n                                {/*<Label className={`error-text ${validate.height ? '' : 'hide'}`} basic color='red' pointing>*/}\r\n                                {/*    {validate.height}*/}\r\n                                {/*</Label>*/}\r\n                            </Form.Group>\r\n                            <Form.Group className=\"form-group\" widths='equal'>\r\n                                <Form.Input\r\n                                    name='power'\r\n                                    value={device.power}\r\n                                    onChange={this.handleChangeInput.bind(this)}\r\n                                    fluid\r\n                                    disabled\r\n                                    label={<label>Power</label>}\r\n                                />\r\n                            </Form.Group>\r\n\r\n                        </Form>\r\n                    </Grid.Column>\r\n                )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Head>\r\n                    <title>{title}</title>\r\n                </Head>\r\n                <DashboardLayout>\r\n                    <Segment>\r\n                        <Header>{title}</Header>\r\n                        <Grid divided='vertically'>\r\n                            <Grid.Row columns={3}>\r\n                                <Grid.Column>\r\n                                    <Form>\r\n                                        <Form.Group className=\"form-group\" widths='equal'>\r\n                                            <Form.Input\r\n                                                name='rackName'\r\n                                                value={current.rackName}\r\n                                                fluid\r\n                                                label={<label>Rack name</label>}\r\n                                                disabled\r\n                                            />\r\n                                        </Form.Group>\r\n                                        <Form.Group className=\"form-group\" widths='equal'>\r\n                                            <Form.Input\r\n                                                name='position'\r\n                                                value={addDevice.position ? addDevice.position + ' - ' + addDevice.positionU : ''}\r\n                                                fluid\r\n                                                label={<label>Position</label>}\r\n                                                disabled\r\n                                            />\r\n                                        </Form.Group>\r\n                                        <Form.Group className=\"form-group\" widths='equal'>\r\n                                            <Form.Input\r\n                                                name='deviceName'\r\n                                                value={device.deviceName}\r\n                                                onChange={this.handleChangeInput.bind(this)}\r\n                                                fluid\r\n                                                label={<label>Device name <strong className=\"error-validate\">*</strong></label>}\r\n                                                placeholder='Device name'\r\n                                                error={validate.deviceName ? true : false}\r\n                                            />\r\n                                            <Label className={`error-text ${validate.deviceName ? '' : 'hide'}`} basic\r\n                                                   color='red' pointing>\r\n                                                {validate.deviceName}\r\n                                            </Label>\r\n                                        </Form.Group>\r\n                                        <Form.Group className=\"form-group\" widths='equal'>\r\n                                            <Form.Input\r\n                                                name='connectorNumber'\r\n                                                value={device.connectorNumber}\r\n                                                onChange={this.handleChangeInput.bind(this)}\r\n                                                fluid\r\n                                                type='number'\r\n                                                label={<label>Connector number <strong\r\n                                                    className=\"error-validate\">*</strong></label>}\r\n                                                placeholder='Connector number'\r\n                                                error={validate.connectorNumber ? true : false}\r\n                                            />\r\n                                            <Label className={`error-text ${validate.connectorNumber ? '' : 'hide'}`}\r\n                                                   basic color='red' pointing>\r\n                                                {validate.connectorNumber}\r\n                                            </Label>\r\n                                        </Form.Group>\r\n                                        <Form.Group className=\"form-group\" widths='equal'>\r\n                                            <Form.Dropdown\r\n                                                name='deviceTypeId'\r\n                                                label={<label>Device Type <strong className=\"error-validate\">*</strong></label>}\r\n                                                fluid\r\n                                                placeholder='Select...'\r\n                                                search\r\n                                                selection\r\n                                                clearable\r\n                                                options={this.getDeviceType()}\r\n                                                onChange={this.handleSelect.bind(this)}\r\n                                                value={addDevice.deviceTypeId || ''}\r\n                                                error={validate.deviceTypeId ? true : false}\r\n                                            />\r\n                                            <Label className={`error-text ${validate.deviceTypeId ? '' : 'hide'}`} basic\r\n                                                   color='red' pointing>\r\n                                                {validate.deviceTypeId}\r\n                                            </Label>\r\n                                        </Form.Group>\r\n                                        <Form.Group className=\"form-group\" widths='equal'>\r\n                                            <Form.Dropdown\r\n                                                name='deviceTemplateId'\r\n                                                label={<label>Device Template <strong\r\n                                                    className=\"error-validate\">*</strong></label>}\r\n                                                fluid\r\n                                                placeholder='Select...'\r\n                                                search\r\n                                                selection\r\n                                                clearable\r\n                                                options={this.getDeviceTemplate()}\r\n                                                onChange={this.handleSelect.bind(this)}\r\n                                                value={addDevice.deviceTemplateId || ''}\r\n                                                error={validate.deviceTemplateId ? true : false}\r\n                                            />\r\n                                            <Label className={`error-text ${validate.deviceTemplateId ? '' : 'hide'}`}\r\n                                                   basic color='red' pointing>\r\n                                                {validate.deviceTemplateId}\r\n                                            </Label>\r\n                                        </Form.Group>\r\n                                        <Form.Group>\r\n                                            <Form.Button secondary type='submit' disabled={loading === 1}\r\n                                                         onClick={this.handleCancel.bind(this)}>Cancel</Form.Button>\r\n                                            <Form.Button primary type='submit' disabled={loading === 1}\r\n                                                         onClick={this.handleSave.bind(this)}>Save</Form.Button>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </Grid.Column>\r\n                                {formDevice}\r\n                                <Grid.Column>\r\n                                    <Form>\r\n                                        <Form.Group className=\"form-group\" widths='equal'>\r\n                                            <Form.Dropdown\r\n                                                name='contractId'\r\n                                                label={<label>Contract code <strong\r\n                                                    className=\"error-validate\">*</strong></label>}\r\n                                                fluid\r\n                                                placeholder='Select...'\r\n                                                search\r\n                                                selection\r\n                                                clearable\r\n                                                options={this.getContracts()}\r\n                                                onChange={this.handleSelect.bind(this)}\r\n                                                value={addDevice.contractId || ''}\r\n                                                error={validate.contractId ? true : false}\r\n                                            />\r\n                                            <Label className={`error-text ${validate.contractId ? '' : 'hide'}`} basic\r\n                                                   color='red' pointing>\r\n                                                {validate.contractId}\r\n                                            </Label>\r\n                                        </Form.Group>\r\n                                        {/*<Form.Group className=\"form-group\" widths='equal'>*/}\r\n                                        {/*    <Form.Input */}\r\n                                        {/*        name='fullName'*/}\r\n                                        {/*        value={device.fullName} */}\r\n                                        {/*        onChange={this.handleChangeInput.bind(this)} */}\r\n                                        {/*        fluid */}\r\n                                        {/*        label={<label>Full Name</label>}*/}\r\n                                        {/*    />*/}\r\n                                        {/*</Form.Group>*/}\r\n                                        <Form.Group className=\"form-group\" widths='equal'>\r\n                                            <Form.Dropdown\r\n                                                name='departmentId'\r\n                                                label={<label>Department <strong\r\n                                                    className=\"error-validate\">*</strong></label>}\r\n                                                fluid\r\n                                                placeholder='Select...'\r\n                                                search\r\n                                                selection\r\n                                                clearable\r\n                                                options={this.getDepartments()}\r\n                                                onChange={this.handleSelect.bind(this)}\r\n                                                value={addDevice.departmentId || ''}\r\n                                                error={addDevice.departmentId ? true : false}\r\n                                            />\r\n                                        </Form.Group>\r\n                                        <Form.Group className=\"form-group\" widths='equal'>\r\n                                            <Form.Input\r\n                                                name='phone'\r\n                                                value={device.phone}\r\n                                                onChange={this.handleChangeInput.bind(this)}\r\n                                                fluid\r\n                                                label={<label>Phone</label>}\r\n                                            />\r\n                                        </Form.Group>\r\n                                        <Form.Group className=\"form-group\" widths='equal'>\r\n                                            <Form.Input\r\n                                                name='typeServer'\r\n                                                value={device.typeServer}\r\n                                                onChange={this.handleChangeInput.bind(this)}\r\n                                                fluid\r\n                                                label={<label>Type Server</label>}\r\n                                            />\r\n                                        </Form.Group>\r\n                                        <Form.Group className=\"form-group\" widths='equal'>\r\n                                            <Form.Input\r\n                                                name='IP'\r\n                                                value={device.IP}\r\n                                                onChange={this.handleChangeInput.bind(this)}\r\n                                                fluid\r\n                                                label={<label>IP</label>}\r\n                                            />\r\n                                        </Form.Group>\r\n\r\n                                    </Form>\r\n\r\n                                </Grid.Column>\r\n\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Segment>\r\n                </DashboardLayout>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nAddDevice.getInitialProps = async (context) => {\r\n    const {req = {}, query = {}, store} = context;\r\n    const {originalUrl} = req;\r\n    if (query.id) {\r\n        await store.dispatch(rackA.initUpdate({originalUrl, action: 'update'}));\r\n    } else {\r\n        await store.dispatch(rackA.initUpdate({originalUrl, action: 'insert'}));\r\n    }\r\n    return store.getState();\r\n}\r\n\r\n// const mapStateToProps =({racks}) => ({racks});\r\nconst mapStateToProps = (state, props) => {\r\n    const {racks} = state;\r\n    const _racks = props.racks;\r\n    if (racks.originalUrl) {\r\n        return {\r\n            racks\r\n        };\r\n    } else {\r\n        return {\r\n            racks: {\r\n                ...props.racks,\r\n                ...racks,\r\n            }\r\n        };\r\n    }\r\n\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(AddDevice);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAIA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AAEA;AAMA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAqBA;AA5CA;AA8CA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AATA;AAeA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAaA;AACA;AACA;AAQA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AASA;AAAA;AACA;AAAA;AADA;AAKA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AATA;AAWA;AACA;AAAA;AAAA;AADA;AAKA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAAA;AACA;AAAA;AADA;AAKA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AADA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AAAA;AACA;AAAA;AADA;AAcA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAmBA;;;;AA9jBA;AACA;AAgkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AAPA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAUA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAMA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}